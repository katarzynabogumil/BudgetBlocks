// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  sub                String    @unique
  firstName          String
  lastName           String?
  nickname           String?
  email              String    @unique
  createdAt          DateTime  @default(now())
  projects           Project[] @relation(name: "owners")
  projectInvitations Project[] @relation(name: "invites")
  comments           Comment[] 
}

model Project {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  owners        User[]   @relation(name: "owners")
  invitedUsers  User[]   @relation(name: "invites")
  name          String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  budget        Float
  budgetRating  Int?
  currency      String
  currencyRates Json?
  dateFrom      DateTime? 
  dateTo        DateTime?  
  area          Int? 
  location      String?
  noOfGuests    Int?
  occasion      String?
  origin        String?
  destination   String?
  description   String?
  expenses      Expense[] 
  categories    ExpCategory[] 
}

model Expense {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  Int
  name       String    @db.VarChar(255)
  cost       Float
  currency   String
  calcCost   Float?
  link       String?
  photo      String?
  notes      String?
  category   ExpCategory   @relation(fields: [categoryId], references: [id])
  categoryId Int
  upvotes    String[]
  downvotes  String[]
  comments   Comment[]
}

model ExpCategory {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  expenses  Expense[]
  orderId   Int
  category  String
  optional  Boolean? @default(false)
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  text      String
}